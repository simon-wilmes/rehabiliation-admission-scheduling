[INSTANCE]
num_beds: 40
workday_start: 8 # uhr
workday_end: 16 # uhr
day_start:0
# rolling_windows_days is a list of days at which to start a rolling window check

conflict_groups: []
# conflict groups is a list of sets where each set represents a single conflict group
horizon_length: 14

even_scheduling_upper: 1.1
even_scheduling_width: 5

time_slot_length: Duration(hours=0, minutes=15)


daily_scheduling_upper: 1.3
daily_scheduling_lower: 0.8

[DATA: RESOURCE_GROUPS]: rgid, name
# "rgid" is of type int (must be unique)
# "name" is of type str
0; therapists
1; rooms
2; sport_room
3; physiotherapist

[DATA: RESOURCES]: rid, rgid, name, unavailable_time_slots
# "rid" is of type int (must be unique)
# "rgid" is of type int: refers to the rgid of a resource_group
# "name" is of type str
# "unavailable_time_slots" is of type: list[tuple[DayHour, DayHour, int | None]]
# where the syntax is the first entry says the start date, 
# the second entry is the end date of the unavailability 
# and the last entry is the interval of days of repetition, none if only once

0;  [0];  therapist0;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
1;  [0];  therapist1;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
2;  [0];  therapist2;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
3; [0,1]; room_therapist3;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
8;  [0];  therapist3;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
6;  [0,3];  therapist7;  [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
9; [3]; physiotherapis2; [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1),(DayHour(day=0, hour=17), DayHour(day=0, hour=19), 2)]
5;  [1];  room5;   [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
4;  [1];  room4;   [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]
7; [1,2]; sport_room; [(DayHour(day=0, hour=12), DayHour(day=0, hour=13), 1)]


[DATA: TREATMENTS]: tid, min_participants, max_participants, name, duration, resources
# "tid" is of type int (must be unique)
# "num_participants" is of type int
# "name" is of type str
# "duration" is of type Duration
# "resources" is of type dict[RGID, tuple[number_of_resources, requires_loyalty]]

0; 2; 5; music_therapy; Duration(hours=0, minutes=45); {0: 2, 1: 1}
1; 1; 1; bath; Duration(hours=0, minutes=30); {1: 1}
2; 10; 20; group_therapy; Duration(hours=0, minutes=45); {0: 1, 1: 1}
3; 2; 6; knitting; Duration(hours=2, minutes=0); {0: 1, 1: 1}
4; 1; 2; trust_exercise; Duration(hours=0, minutes=30); {0: 1, 1: 1}
5; 1; 2; massage; Duration(hours=0, minutes=30); {3: 2, 1: 1}
6; 5; 20; sport; Duration(hours=1, minutes=15); {0: 1, 2: 1}
7; 1; 2; physio; Duration(hours=1, minutes=0); {2: 1, 1: 1, 3:1}




[DATA: PATIENTS]: pid, name, treatments, length_of_stay, earliest_admission_date, admitted_before_date, already_admitted_date, already_scheduled_treatments

# "pid" is of type int (must be unique)
# "name" is of type string (patient's name)
# "treatments" is a dictionary where keys are treatment IDs (int) and values are number of treatments required
# "length_of_stay" is of type int (total length of stay in days)
# "earliest_admission_date" is of type DayHour (earliest possible admission date)
# "admitted_before_date" is of type DayHour (latest possible admission date)
# "already_admitted" is of type bool and is true if the patient has been admitted in the past and therefore should be admitted in the model on the first day
# "already_resource_loyal" is a dictionary where the keys are (tuples) of treatment TID and RGID and values is a the list of RID that are loyal, this means that the list must have length of required resources of RGID for treatment TID
# "already_scheduled_treatments" is a list of tuples where each tuple contains a treatment ID (int) and the number of times it was already scheduled in the past

0; patient0;   {0:7,1:6,2:5,3:3,4:2,5:5,6:2};          14;      DayHour(day=0, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False;  []
1; patient1;   {1:6, 2:6, 0:7,3:9,4:3,5:9,6:4,7:7};     15;      DayHour(day=1, hour=0, minutes=0); DayHour(day=5, hour=0, minutes=0); False; []
2; patient2;   {1:6, 2:6, 1:5,3:5,4:9,5:4,6:4,7:7};     15;      DayHour(day=2, hour=0, minutes=0); DayHour(day=4, hour=0, minutes=0); False; []
3; patient3;   {1:6, 2:6, 0:7,3:6,4:6,5:6,6:2,7:7};     14;      DayHour(day=2, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
4; patient4;   {1:6, 2:4, 0:7,3:5,4:6,5:3,6:6,7:7};     15;      DayHour(day=3, hour=0, minutes=0); DayHour(day=7, hour=0, minutes=0); False;  []



5; patient5;   {0:3, 2:2, 1:3,3:3,4:2,5:2,6:2};     13;      DayHour(day=4, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
6; patient6;   {0:5, 2:1, 1:3,3:3,4:2,5:2,6:2};     15;      DayHour(day=5, hour=0, minutes=0); DayHour(day=9, hour=0, minutes=0); False; []
7; patient7;   {0:5, 2:2, 1:4,3:3,4:2,5:2,6:2};     12;      DayHour(day=2, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False; []
8; patient8;   {0:2, 2:5, 1:3,3:3,4:2,5:2,6:2,7:7};     15;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; [(0,1)]
9; patient9;   {0:7, 2:3, 1:4,3:3,4:2,5:2,6:2,7:10};     16;      DayHour(day=9, hour=0, minutes=0); DayHour(day=13, hour=0, minutes=0); False; []

10; patient10; {0:3,2:3,1:4,3:3,4:2,5:2,6:2};     13;      DayHour(day=8, hour=0, minutes=0); DayHour(day=12, hour=0, minutes=0); False; []
11; patient11; {0:4,0:7,2:3,3:3,4:6,5:5,6:2, 7:10};     15;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
12; patient12; {1:4,2:7,0:3,3:3,4:5,5:9,6:2};     13;      DayHour(day=7, hour=0, minutes=0); DayHour(day=18, hour=0, minutes=0); False; []
13; patient13; {0:6,2:4,1:5,3:3,4:4,5:3,6:2,7:10};     15;      DayHour(day=8, hour=0, minutes=0); DayHour(day=16, hour=0, minutes=0); False; []
14; patient14; {0:5,1:5,2:5,3:3,4:3,5:3,6:2};     12;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
15; patient15; {0:5,1:5,2:5,3:3,4:5,5:3,6:2};     12;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
16; patient16; {0:5,1:9,2:5,3:4,4:7,5:3,6:2,7:9};     15;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
17; patient17; {0:5,1:4,2:5,3:7,4:2,5:3,6:2};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
18; patient18; {0:5,1:7,2:5,3:5,4:6,5:5,6:2,7:8};     15;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
19; patient19; {0:4,1:6,2:5,3:5,4:5,5:6,6:2,7:10};     17;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
20; patient20;   {1:6, 2:5, 0:7};          6;      DayHour(day=0, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False;  []
21; patient21;   {1:6, 2:6, 0:7};     9;      DayHour(day=1, hour=0, minutes=0); DayHour(day=5, hour=0, minutes=0); False; []
22; patient22;   {1:6, 2:6, 1:5};     6;      DayHour(day=2, hour=0, minutes=0); DayHour(day=4, hour=0, minutes=0); False; []
23; patient23;   {1:6, 2:3, 0:7};     7;      DayHour(day=2, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
24; patient24;   {1:6, 2:4, 0:7};     6;      DayHour(day=3, hour=0, minutes=0); DayHour(day=7, hour=0, minutes=0); False;  []
25; patient25;   {0:3, 2:2, 1:3};     7;      DayHour(day=4, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
26; patient26;   {0:5, 2:1, 1:3};     6;      DayHour(day=5, hour=0, minutes=0); DayHour(day=9, hour=0, minutes=0); False; []
27; patient27;   {0:5, 2:2, 1:4};     7;      DayHour(day=2, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False; []
28; patient28;   {0:2, 2:5, 1:3};     6;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; [(0,1)]
29; patient29;   {0:7, 2:3, 1:4};     8;      DayHour(day=9, hour=0, minutes=0); DayHour(day=13, hour=0, minutes=0); False; []
