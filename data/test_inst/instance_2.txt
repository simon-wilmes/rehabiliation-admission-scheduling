[INSTANCE]
num_beds: 15
workday_start: 8 # uhr
workday_end: 18 # uhr
day_start:0
# rolling_windows_days is a list of days at which to start a rolling window check

conflict_groups: []
# conflict groups is a list of sets where each set represents a single conflict group
horizon_length: 5

even_scheduling_upper: 1.2
even_scheduling_width: 5

time_slot_length: Duration(hours=1)


daily_scheduling_upper: 1.4
daily_scheduling_lower: 0.7

[DATA: RESOURCE_GROUPS]: rgid, name
# "rgid" is of type int (must be unique)
# "name" is of type str
0; therapists
1; rooms


[DATA: RESOURCES]: rid, rgid, name, unavailable_time_slots
# "rid" is of type int (must be unique)
# "rgid" is of type int: refers to the rgid of a resource_group
# "name" is of type str
# "unavailable_time_slots" is of type: list[tuple[DayHour, DayHour, int | None]]
# where the syntax is the first entry says the start date, 
# the second entry is the end date of the unavailability 
# and the last entry is the interval of days of repetition, none if only once

0;  [0];  therapist0; None
1;  [0];  therapist1; None
2;  [0];  therapist2; None
3;  [0];  therapist3; None
7;  [0];  therapist7; None
9;  [0];  therapist9; None
5;  [1];  room5;  None
4;  [1];  room4;  None
6;  [1];  room6;  None
8;  [1];  room8;  None


[DATA: TREATMENTS]: tid, num_participants, name, duration, resources
# "tid" is of type int (must be unique)
# "num_participants" is of type int
# "name" is of type str
# "duration" is of type Duration
# "resources" is of type dict[RGID, tuple[number_of_resources, requires_loyalty]]

0; 5; music_therapy; Duration(hours=0, minutes=45); {0:3, 1: 1}
1; 1; bath; Duration(hours=0, minutes=30); {1: 1}
2; 2; trust_exercise; Duration(hours=0, minutes=30); {0: 1, 1: 1}




[DATA: PATIENTS]: pid, name, treatments, length_of_stay, earliest_admission_date, admitted_before_date, already_admitted_date, already_scheduled_treatments

# "pid" is of type int (must be unique)
# "name" is of type string (patient's name)
# "treatments" is a dictionary where keys are treatment IDs (int) and values are number of treatments required
# "length_of_stay" is of type int (total length of stay in days)
# "earliest_admission_date" is of type DayHour (earliest possible admission date)
# "admitted_before_date" is of type DayHour (latest possible admission date)
# "already_admitted" is of type bool and is true if the patient has been admitted in the past and therefore should be admitted in the model on the first day
# "already_resource_loyal" is a dictionary where the keys are (tuples) of treatment TID and RGID and values is a the list of RID that are loyal, this means that the list must have length of required resources of RGID for treatment TID
# "already_scheduled_treatments" is a list of tuples where each tuple contains a treatment ID (int) and the number of times it was already scheduled in the past

0; patient0;   {2:3, 1:6};          6;      DayHour(day=0, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False;  [(0,1)]
1; patient1;   {0:6, 2:6, 1:4};     9;      DayHour(day=1, hour=0, minutes=0); DayHour(day=5, hour=0, minutes=0); False; []
2; patient2;   {0:1, 2:6, 1:5};     6;      DayHour(day=2, hour=0, minutes=0); DayHour(day=4, hour=0, minutes=0); False; []
3; patient3;   {0:3, 2:3, 1:7};     7;      DayHour(day=2, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
4; patient4;   {0:2, 2:4, 1:4};     6;      DayHour(day=3, hour=0, minutes=0); DayHour(day=7, hour=0, minutes=0); False;  [(0,1)]



# 5; patient5;   {0:3, 2:2, 1:3};     7;      DayHour(day=4, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; []
# 6; patient6;   {0:5, 2:1, 1:3};     6;      DayHour(day=5, hour=0, minutes=0); DayHour(day=9, hour=0, minutes=0); False; []
# 7; patient7;   {0:5, 2:2, 1:4};     7;      DayHour(day=2, hour=0, minutes=0); DayHour(day=6, hour=0, minutes=0); False; []
# 8; patient8;   {0:2, 2:5, 1:3};     6;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False; [(0,1)]
# 9; patient9;   {0:7, 2:3, 1:4};     8;      DayHour(day=9, hour=0, minutes=0); DayHour(day=13, hour=0, minutes=0); False; []

#10; patient10; {0:3, 2:3, 1:4};     6;      DayHour(day=8, hour=0, minutes=0); DayHour(day=12, hour=0, minutes=0); False; []
#11; patient11; {0:4, 1:7, 2:3};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#12; patient12; {1:4, 2:7, 0:3};     7;      DayHour(day=7, hour=0, minutes=0); DayHour(day=18, hour=0, minutes=0); False; []
#13; patient13; {0:6, 2:4, 1:5};     8;      DayHour(day=8, hour=0, minutes=0); DayHour(day=16, hour=0, minutes=0); False; []
#14; patient14; {0:5, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#15; patient15; {0:5, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#16; patient16; {0:5, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#17; patient17; {0:5, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#18; patient18; {0:5, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
#19; patient19; {0:4, 1:5, 2:5};     8;      DayHour(day=7, hour=0, minutes=0); DayHour(day=8, hour=0, minutes=0); False;  [(0,1)]
